{"version":3,"sources":["actions/APIActions.js","reducers/API.js","reducers/index.js","components/Header.js","actions/index.js","lib/xhr.js","components/APIList.js","components/EndpointList.js","lib/callAPI.js","lib/getAndSortParameters.js","components/QueryParameters.js","components/ResultItem.js","components/ResultCard.js","components/Loading.js","components/QueryResults.js","components/App.js","reportWebVitals.js","index.js"],"names":["APIActions","getAPISwagger","setActiveAPI","setActiveEndpoint","getEndpointParameters","setParams","setQuery","setQueryResults","initialState","APISwagger","activeEndpoints","EndpointParameters","URLParameters","queries","queryResults","API","state","action","type","actionTypes","payload","apiName","endpoint","parameters","pathname","search","queryPath","replace","split","api","undefined","pathStringForSwagger","pathStringForReact","fullQueryForAPI","fullQueryForReact","query","path","data","queryResult","timestamp","Date","now","status","rootReducer","combineReducers","Header","className","src","process","alt","href","allActions","xhr","axios","create","baseURL","APIList","props","dispatch","useDispatch","apiSwagger","useSelector","activeAPI","history","useHistory","useEffect","get","then","r","paths","Object","keys","filter","length","push","Array","from","Set","map","apiItem","index","to","Name","EndpointList","endpointMatch","slice","join","hasOwnProperty","pathParts","endpointPath","callAPI","store","catch","e","getAndSortParameters","pathData","favoriteParameters","favoritesInParameters","parameter","includes","name","parametersMinusFavorites","match","forEach","fav","QueryParameters","queryObject","JSON","parse","decodeURI","sortedParameters","queryParameters","entries","entry","sort","location","console","log","onSubmit","preventDefault","value","id","onChange","oldFieldName","target","substring","newFieldName","newQueryData","changeFieldName","param","disabled","changeValue","onClick","fieldName","removeField","firstUnusedField","addField","ResultItem","property","title","subProp","idx","subProperty","subValue","stringifiedValue","stringify","validator","isURL","ResultCard","imageData","url","result","Loading","QueryResults","results","App","useLocation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","enhancer","compose","persistState","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOASeA,EATI,CACjBC,cAAe,kBACfC,aAAc,iBACdC,kBAAmB,sBACnBC,sBAAuB,qBACvBC,UAAW,qBACXC,SAAU,YACVC,gBAAiB,qBCNbC,EAAe,CACjBC,WAAY,KACZC,gBAAiB,GACjBC,mBAAoB,KACpBC,cAAe,KACfC,QAAS,GACTC,aAAc,IA+EHC,EA7EH,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCAC5C,OAAQA,EAAOC,MACb,KAAKC,EAAYlB,cACf,OAAO,2BAAKe,GAAZ,IAAmBP,WAAYQ,EAAOG,UACxC,KAAKD,EAAYhB,kBACf,OAAO,2BACFa,GADL,IAEEN,gBAAgB,2BACXM,EAAMN,iBADI,kBAEZO,EAAOG,QAAQC,QAAUJ,EAAOG,QAAQE,aAG/C,KAAKH,EAAYf,sBACf,OAAO,2BACFY,GADL,IAEEL,mBAAmB,eAChBM,EAAOG,QAAQE,SAAWL,EAAOG,QAAQG,cAGhD,KAAKJ,EAAYd,UACf,MAA2BY,EAAOG,QAA3BI,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,OAGXC,EAAYF,EAASG,QAAQ,MAAM,IAAIA,QAAQ,MAAM,IAAIC,MAAM,KAC/DC,EAAMH,EAAU,SAAMI,EACtBR,EAAWI,EAAU,SAAMI,EAC3BC,EAAuBF,GAAOP,EAChCO,IAAQP,EAAR,WACIO,EADJ,gBACiBA,EADjB,YACwBP,EAASK,QAAQ,SAAjB,QAAkCA,QAAQ,SAAS,SAD3E,UACyFG,EACvFE,EAAqBH,GAAOP,EAAP,UACpBO,EADoB,YACbP,QAAaQ,EACrBG,EAAkBF,EACd,UACDA,EAAqBJ,QAArB,QAAqC,KADpC,OAC0CF,EAAOE,QAAP,OAAsB,KAEpE,GACAO,EAAoBF,EACtBP,EAAM,UACDO,EADC,YACqBP,GACzBO,OACAF,EACN,OAAO,2BAAKd,GAAZ,IAAmBJ,cAAe,CAChCiB,MACAP,WACAa,MAAOV,EACPM,uBACAC,qBACAC,kBACAC,uBAEJ,KAAKf,EAAYb,SACf,OAAO,2BACFU,GADL,IAEEH,QAAQ,2BACHG,EAAMH,SADJ,kBAEJI,EAAOG,QAAQgB,KAAOnB,EAAOG,QAAQiB,SAG5C,KAAKlB,EAAYZ,gBACf,OAAO,2BACFS,GADL,IAEEF,aAAa,2BACRE,EAAMF,cADC,kBAETG,EAAOG,QAAQe,MAAQ,CACtBT,UAAWT,EAAOG,QAAQM,UAC1BS,MAAOlB,EAAOG,QAAQe,MACtBG,YAAarB,EAAOG,QAAQkB,YAC5BC,UAAWC,KAAKC,MAChBC,OAAQzB,EAAOG,QAAQsB,QAAU,QAIzC,QACE,OAAO1B,IC3EE2B,EAJKC,YAAgB,CAClC7B,Q,6CCaa8B,EAhBA,WACb,OACE,mCACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,IAAG,UAAKC,GAAL,eACHC,IAAI,4BAEN,6CAEF,qBAAKH,UAAU,QAAf,SACE,mBAAGI,KAAK,kCAAR,mCCVOC,EADI,CAAEnD,c,QCKNoD,E,OAJHC,EAAMC,OAAO,CACvBC,QAAuFP,yCCE1E,SAASQ,EAAQC,GAC9B,IAAMC,EAAWC,cACXC,EAAaC,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIN,cAC9CqD,EAAYD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAI+C,aAC7ClD,EAAgBiD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIH,iBACjDmD,EAAUC,cA0BhB,OAvBAC,qBAAU,WACRb,EAAIc,IAAI,cAAcC,MAAK,SAACC,GAC1BV,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWC,cAC5BmB,QAASgD,EAAE/B,YAGd,CAACqB,IAGJO,qBAAU,WACJL,GAAcA,EAAWS,QACvBzD,EAAciB,KAIQ,IAHPyC,OAAOC,KAAKX,EAAWS,OAAOG,QAC7C,SAACpC,GAAD,OAAUA,EAAKR,MAAM,KAAK,KAAOhB,EAAciB,OAEpC4C,QACXV,EAAQW,KAAK,QAIlB,CAAC9D,EAAegD,EAAYG,IAG7B,oCACa,OAAVH,QAAU,IAAVA,OAAA,EAAAA,EAAYS,QACX,8BACGM,MAAMC,KACL,IAAIC,IACFP,OAAOC,KAAKX,EAAWS,OAAOS,KAAI,SAAC1C,GACjC,OAAOA,EAAKR,MAAM,KAAK,QAG3BkD,KAAI,SAACC,EAASC,GACd,OACE,cAAC,IAAD,CACEC,GAAE,WAAMF,GAERjC,UAAS,cACPgB,GAAaA,EAAUoB,OAASH,EAAhC,qBAJJ,SASGA,GATH,kBAEkBC,WC9CjB,SAASG,IACtB,IAAMvB,EAAaC,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIN,cAC9CC,EAAkBmD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIL,mBACnDE,EAAgBiD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIH,iBACjD8C,EAAWC,cACXI,EAAUC,cACRnC,EAAkBjB,EAAlBiB,IAAKP,EAAaV,EAAbU,SAuDb,OAtDA2C,qBAAU,WACR,GAAIL,GAAc/B,EAAK,CACrB,IAAMuD,EAAgBd,OAAOC,KAAKX,EAAWS,OAAOG,QAAO,SAACpC,GAE1D,OADkBA,EAAKR,MAAM,KACf,KAAOC,IAGFO,EAChBR,MAAM,KACNyD,MAAM,GAAI,GACVC,KAAK,KACL3D,QAAQ,OAAQ,QACAL,GAAYA,IAAaO,QAM5CuD,EAAcX,OAAS,IACrB/D,GAAoBA,EAAgB6E,eAAe1D,IAErD6B,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWG,kBAC5BiB,QAAS,CAAEC,QAASQ,EAAKP,cAI3B8D,EAAcX,OAAS,GACvB/D,GACAA,EAAgB6E,eAAe1D,IAC/BnB,EAAgBmB,KAASP,GAEzBoC,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWG,kBAC5BiB,QAAS,CAAEC,QAASQ,EAAKP,SAAUA,KAIrCZ,IAAoBY,GAAYZ,EAAgB6E,eAAe1D,IAE/DkC,EAAQW,KAAR,WACM7C,EADN,YACanB,EAAgBmB,QAIhC,CACDjB,EACA8C,EACAE,EACA/B,EACAP,EACAZ,EACAqD,IAGA,8BACGlC,GAAO+B,GACNU,OAAOC,KAAKX,EAAWS,OAAOS,KAAI,SAAC1C,EAAM4C,GACvC,IAAMQ,EAAYpD,EAAKR,MAAM,KACvB6D,EACa,KAAjBD,EAAU,GACN3D,EACA2D,EAAUH,MAAM,GAAI,GAAGC,KAAK,KAAK3D,QAAQ,QAAS,IACxD,OAAI6D,EAAU,KAAO3D,EAEjB,cAAC,IAAD,CACEoD,GAAE,WAAMpD,EAAN,YAAa4D,GAEf3C,UAAS,cACPlC,EAAcU,WAAamE,EAA3B,qBAJJ,SASGA,GATH,mBAEmBA,EAFnB,YAEmCT,IAW9B,U,YChDJU,EAtCC,SAAC,GAAgE,IAA9D1D,EAA6D,EAA7DA,mBAAoBE,EAAyC,EAAzCA,kBAAmBD,EAAsB,EAAtBA,gBACxD0D,EAAMjC,SAAS,CACbxC,KAAMiC,EAAWnD,WAAWO,gBAC5Ba,QAAS,CACPM,UAAWM,EACXG,MAAOD,EACPI,YAAa,GACbI,OAAQ,eAGZU,EACGc,IADH,eACejC,IACZkC,MAAK,SAACC,GACDA,EAAE/B,MACJsD,EAAMjC,SAAS,CACbxC,KAAMiC,EAAWnD,WAAWO,gBAC5Ba,QAAS,CACPM,UAAWM,EACXG,MAAOD,EACPI,YAAa8B,EAAE/B,KACfK,OAAQ,gBAKfkD,OAAM,SAACC,GACNF,EAAMjC,SAAS,CACbxC,KAAMiC,EAAWnD,WAAWO,gBAC5Ba,QAAS,CACPM,UAAWM,EACXG,MAAOD,EACPI,YAAa,GACbI,OAAQ,kE,QCLHoD,EA9Bc,SAACC,GAAc,IAAD,EACjCC,EAAqB,CAAC,UACtBzE,EAAa,IAEP,OAARwE,QAAQ,IAARA,GAAA,UAAAA,EAAU7B,WAAV,eAAe3C,aAAcwE,EAAS7B,IAAI3C,WAAWkD,OAAS,GAC9DlD,EAAWmD,KAAX,MAAAnD,EAAU,YAASwE,EAAS7B,IAAI3C,cAEtB,OAARwE,QAAQ,IAARA,OAAA,EAAAA,EAAUxE,aAAcwE,EAASxE,WAAWkD,OAAS,GACvDlD,EAAWmD,KAAX,MAAAnD,EAAU,YAASwE,EAASxE,aAE9B,IAAM0E,EAAwB1E,EAAWiD,QAAO,SAAC0B,GAAD,OAC9CF,EAAmBG,SAASD,EAAUE,SAElCC,EAA2B9E,EAAWiD,QAAO,SAAC0B,GAClD,IAAII,EAAQ,EAMZ,OALAL,EAAsBM,SAAQ,SAACC,GACzBA,EAAIJ,OAASF,EAAUE,MACzBE,SAGAA,EAAQ,MAKd,MAAM,GAAN,mBACKL,GADL,YAEKI,KCrBI,SAASI,IACtB,IAAM/C,EAAWC,cACXI,EAAUC,cACVJ,EAAaC,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIN,cAC9CE,EAAqBkD,aACzB,SAAC7C,GAAD,OAAWA,EAAMD,IAAIJ,sBAEjBC,EAAgBiD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIH,iBACjDC,EAAUgD,aAAY,SAAC7C,GAAD,OAAWA,EAAMD,IAAIF,WAC3CC,EAAe+C,aAAY,SAAC7C,GAAD,OAAUA,EAAMD,IAAID,gBAC9Ce,EAAsGjB,EAAtGiB,IAAKP,EAAiGV,EAAjGU,SAAUa,EAAuFvB,EAAvFuB,MAAOJ,EAAgFnB,EAAhFmB,qBAAsBE,EAA0DrB,EAA1DqB,gBAAiBD,EAAyCpB,EAAzCoB,mBAAoBE,EAAqBtB,EAArBsB,kBAGxF+B,qBAAU,WACR,GAAI9B,GAASyB,EAAWS,MAAX,UAAoBtC,IAAyB,CACxD,IAAM2E,EAAcC,KAAKC,MACvB,KAAOC,UAAU1E,GACdR,QAAQ,MAAM,IACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAK,OAAS,MAE3B+B,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CAAEgB,KAAMF,EAAmBG,KAAMqE,OAGzC5F,EAAaoB,IACXpB,EAAaoB,GAAmBK,UAAYC,KAAKC,MAAQ,MAE5DiD,EAAQ9E,MAGZ,CAACuB,EAAOrB,EAAc8C,EAAYhD,EAAesB,EAAmBH,EAAsB2B,IAC5FO,qBAAU,WAER,GAAI3C,GAAYO,GAAO+B,EAAY,CACjC,IAAMmC,EAAWnC,EAAWS,MAAX,UAAoBtC,IAC/B+E,EAAmBhB,EAAqBC,GAC9CrC,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWI,sBAC5BgB,QAAS,CACPE,SAAUU,EACVT,WAAYuF,KAIgB,IAA5BA,EAAiBrC,SAAjB,OAAiCsB,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAU7B,QAE1CpD,EAAaoB,IACXpB,EAAaoB,GAAmBK,UAAYC,KAAKC,MAAQ,MAE5DiD,EAAQ9E,MAIb,CAACA,EAAemB,EAAsBC,EAAoBE,EAAmBL,EAAKP,EAAUsC,EAAY9C,EAAc4C,IAEzHO,qBAAU,WACJ/B,GAA2C,KAAtBA,IAA6BA,EAAkBiE,SAAS,iBAC5DtF,GAAUqB,KAAqBrB,GAEhD6C,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CAAEgB,KAAMF,EAAmBG,KAAM,WAI/C,CAACxB,EAASqB,EAAmBwB,IAGhCO,qBAAU,WACR,GAAIpD,GAAWA,EAAQqB,GAAoB,CACzC,IAAM6E,EAAkBzC,OAAO0C,QAAQnG,EAAQqB,IAC5CsC,QAAO,SAACyC,GAAD,MAAwB,KAAbA,EAAM,MACxBnC,KAAI,SAACmC,GAAD,gBAAcA,EAAM,GAApB,YAA0BA,EAAM,OACpCC,OACA5B,KAAK,KACa,UAAMvB,EAAQoD,SAAS3F,UAAvB,OAAkCuC,EAAQoD,SAAS1F,UACvD,WAAOO,EAAP,aAA8B+E,KAE7CK,QAAQC,IAAI,WACZtD,EAAQW,KAAR,WAAiB1C,EAAjB,aAAwC+E,QAG3C,IAGH9C,qBAAU,WAENpD,GAC+B,OAA/BA,EAAQqB,IACRvB,GACAA,EAAmBqB,IACnBrB,EAAmBqB,GAAoByC,OAAS,GAEhDf,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CACPgB,KAAMF,EACNG,KAAK,eAAI1B,EAAmBqB,GAAoB,GAAGoE,KAAO,SAI/D,CAACvF,EAASmB,EAAoBrB,EAAoBsB,EAAiBC,EAAmBwB,IAqDzF,OACE,mCACG7C,GACCA,EAAQqB,IACRvB,GACAA,EAAmBqB,IACjB,uBACEsF,SAAU,SAACzB,GACTA,EAAE0B,iBAhBG,WACf,IAAMR,EAAkBzC,OAAO0C,QAAQnG,EAAQqB,IAC5CsC,QAAO,SAACyC,GAAD,MAAwB,KAAbA,EAAM,MACxBnC,KAAI,SAACmC,GAAD,gBAAcA,EAAM,GAApB,YAA0BA,EAAM,OACpCC,OACA5B,KAAK,KACRvB,EAAQW,KAAR,WAAiB1C,EAAjB,aAAwC+E,IAW9BO,IAHJ,UAMGhD,OAAO0C,QAAQnG,EAAQqB,IAAoB4C,KAAI,SAACkC,EAAShC,GACxD,kBAA2BgC,EAA3B,GAAOd,EAAP,KAAkBsB,EAAlB,KACA,OACE,gCACE,wBACEA,MAAOtB,EACPuB,GAAE,UAAKvB,EAAL,WACFwB,SAAU,SAAC7B,GAAD,OA/CJ,SAACA,GACvB,IAAM8B,EAAe9B,EAAE+B,OAAOH,GAAGI,UAAU,EAAGhC,EAAE+B,OAAOH,GAAGhD,OAAS,GAC7DqD,EAAejC,EAAE+B,OAAOJ,MACxBO,EAAelH,EAAQqB,UACtB6F,EAAaJ,GACpBI,EAAaD,GAAgB,GAC7BpE,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CAAEgB,KAAMF,EAAmBG,KAAM0F,KAuCXC,CAAgBnC,IAHnC,SAKGlF,EAAmBqB,IAClBrB,EAAmBqB,GAAoByC,OAAS,GAChD9D,EAAmBqB,GAAoB8C,KAAI,SAACmD,EAAOjD,GACjD,IAAMkD,EACJ5D,OAAOC,KAAK1D,EAAQqB,IAAoBiE,SACtC8B,EAAM7B,OACHF,IAAc+B,EAAM7B,KAC3B,OACE,wBAEE8B,SAAUA,EACVT,GAAE,UAAKQ,EAAM7B,KAAX,WAHJ,SAKG6B,EAAM7B,MALT,gBACgBpB,SASxB,uBACE9D,KAAK,OACLsG,MAAOA,EACPE,SAAU,SAAC7B,GAAD,OA3DR,SAACA,GACnB,IAAMkC,EAAelH,EAAQqB,GAC7B6F,EAAalC,EAAE+B,OAAOH,GAAGI,UAAU,EAAGhC,EAAE+B,OAAOH,GAAGhD,OAAS,IACzDoB,EAAE+B,OAAOJ,MACX9D,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CAAEgB,KAAMF,EAAmBG,KAAM0F,KAqDXI,CAAYtC,IAC7B4B,GAAE,UAAKvB,EAAL,YAEHlB,EAAQ,GACP,wBACE9D,KAAK,SACLuG,GAAE,UAAKvB,EAAL,WACFkC,QAAS,SAACvC,GACRA,EAAE0B,iBAvFJ,SAAC1B,GACnB,IAAMwC,EAAYxC,EAAE+B,OAAOH,GAAGI,UAAU,EAAGhC,EAAE+B,OAAOH,GAAGhD,OAAS,GAC1DsD,EAAelH,EAAQqB,UACtB6F,EAAaM,GACpB3E,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CAAEgB,KAAMF,EAAmBG,KAAM0F,KAkFxBO,CAAYzC,IALhB,iBA/BJ,oBAAuBb,OA6C1BV,OAAOC,KAAK1D,EAAQqB,IAAoBuC,OACvC9D,EAAmBqB,GAAoByC,QACvC,4BACE,wBACEvD,KAAK,SACLkH,QAAS,SAACvC,GACRA,EAAE0B,iBAtHH,WACf,IAAMgB,EAAmB5H,EAAmBqB,GAAoBwC,QAC9D,SAAC0B,GAAD,OAAgB5B,OAAOC,KAAK1D,EAAQqB,IAAoBiE,SAASD,EAAUE,SAC3E,GAAGA,KACL1C,EAAS,CACPxC,KAAMiC,EAAWnD,WAAWM,SAC5Bc,QAAS,CACPgB,KAAMF,EACNG,KAAK,2BACAxB,EAAQqB,IADT,kBAEDqG,EAAmB,QA6GVC,IAJJ,iBAWJ,4BACE,uBAAOtH,KAAK,SAASsG,MAAM,kB,qBC7O1B,SAASiB,EAAWhF,GACjC,IAAOiF,EAAmBjF,EAAnBiF,SAAUlB,EAAS/D,EAAT+D,MACjB,GAAc,OAAVA,GAAmC,IAAjBA,EAAM/C,OAAgB,OAAO,KACnD,GAAqB,kBAAV+C,EACT,OACE,qBAAK1E,UAAU,aAAf,SACE,oCACE,kCACE,4BACE,uBAAMA,UAAU,QAAhB,UACG4F,EACAlB,EAAMpB,MAAN,YAAmBoB,EAAMpB,KAAzB,MACCoB,EAAMpB,MAAQoB,EAAMmB,OAArB,YAAmCnB,EAAMmB,MAAzC,YAINrE,OAAO0C,QAAQQ,GAAO1C,KAAI,SAAC8D,EAAQC,GAClC,kBAA6BD,EAA7B,GAAOE,EAAP,KAAmBC,EAAnB,KACA,OAAiB,OAAbA,EAA4B,KAE9B,cAACN,EAAD,CAAsDC,SAAUI,EAAatB,MAAOuB,GAApF,UAAoBL,EAApB,YAAgCI,EAAhC,YAA+CD,YAOzD,IAAMG,EAAmBrC,KAAKsC,UAAUzB,GAAO7F,QAAQ,WAAW,MACnE,OACC,qBAAKmB,UAAU,aAAf,SACE,8BAAG,sBAAMA,UAAU,QAAhB,SAAyB4F,IAA5B,KAA+CQ,IAAUC,MAAMH,GAAoB,mBAAG9F,KAAM8F,EAAT,SAA4BA,IAAwBA,O,MC5B9H,SAASI,EAAW3F,GACjC,IAAM4F,EAAY,CAChBC,IAAK,MAEP,OACE,sBAAKxG,UAAU,aAAf,UACE,qBAAKA,UAAU,OAAf,SACGwB,OAAO0C,QAAQvD,EAAMpB,MAAMyC,KAAI,SAACyE,EAAQV,GACvC,kBAA0BU,EAA1B,GAAOb,EAAP,KAAiBlB,EAAjB,KACA,MAAiB,UAAbkB,IAA6B,OAALlB,QAAK,IAALA,OAAA,EAAAA,EAAO/C,QAAS,GAC1C4E,EAAUC,IAAM9B,EACT,MAEK,OAAVA,GAAmC,IAAjBA,EAAM/C,OACnB,KAGP,cAACgE,EAAD,CAEEC,SAAUA,EACVlB,MAAOA,GAHT,UACUkB,EADV,YACsBG,SAOT,OAAlBQ,EAAUC,KAAgBJ,IAAUC,MAAME,EAAUC,MACnD,qBAAKxG,UAAU,QAAf,SACE,mBAAGI,KAAMmG,EAAUC,IAAK1B,OAAO,MAA/B,SACE,qBAAK7E,IAAKsG,EAAUC,IAAKrG,IAAK,Y,WCtB3BuG,EARC,WACd,OACA,sBAAK1G,UAAU,mBAAf,UACE,mBAAGA,UAAU,cAAb,6BACA,qBAAKA,UAAU,eAAeG,IAAI,uBAAuBF,IAAG,UAAKC,GAAL,sBCDjD,SAASyG,IAAgB,IAAD,EAI9BvH,EAHe2B,aAAY,SAAC7C,GAAD,OAChCA,EAAMD,IAAIH,iBAELsB,kBACDpB,EAAe+C,aAAY,SAAC7C,GAAD,OAAYA,EAAMD,IAAID,gBACvD,OACE,qCACCA,GAAgBA,EAAaoB,KAA7B,UAAmDpB,EAAaoB,GAAmBI,mBAAnF,aAAmD,EAA6CoH,UAC/F,qBAAK5G,UAAU,eAAf,SACGhC,EAAaoB,GAAmBI,YAAYoH,QAAQ5E,KAAI,SAACyE,EAAOvE,GAC/D,OACE,cAACoE,EAAD,CAAwC/G,KAAMkH,GAA9C,qBAA+BvE,WAKpClE,IAAiBA,EAAaoB,KAC/B,wCAEDpB,GAAgBA,EAAaoB,IAAiE,cAA3CpB,EAAaoB,GAAmBQ,QAA0B,cAAC,EAAD,OCYnGiH,MA1Bf,WACE,IAAMjG,EAAWC,cACXwD,EAAWyC,cACXhJ,EAAgBiD,aAAY,SAAC7C,GAAD,OAASA,EAAMD,IAAIH,iBAIrD,OAHAqD,qBAAU,WACRP,EAAS,CAAExC,KAAMiC,EAAWnD,WAAWK,UAAWe,QAAS+F,MAC1D,CAACA,EAAUzD,IAEZ,qCACE,cAAC,EAAD,IACA,cAACF,EAAD,KACc,OAAb5C,QAAa,IAAbA,OAAA,EAAAA,EAAeiB,MACd,qCACE,cAACsD,EAAD,KACc,OAAbvE,QAAa,IAAbA,OAAA,EAAAA,EAAeU,WACd,qCACE,cAACmF,EAAD,IACA,cAAC,EAAD,cCfCoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5F,MAAK,YAAkD,IAA/C6F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCIRO,EAAWC,YAAQC,OAEnB5E,EAAQ6E,YACZ7H,EACA8H,OAAOC,8BAAgCD,OAAOC,+BAC9CL,GAGFM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlF,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINmF,SAASC,eAAe,SAM1BlB,K","file":"static/js/main.dd133485.chunk.js","sourcesContent":["const APIActions = {\r\n  getAPISwagger: \"GET_API_SWAGGER\",\r\n  setActiveAPI: \"SET_ACTIVE_API\",\r\n  setActiveEndpoint: \"SET_ACTIVE_ENDPOINT\",\r\n  getEndpointParameters: \"GET_API_PARAMETERS\",\r\n  setParams: \"SET_URL_PARAMETERS\",\r\n  setQuery: \"SET_QUERY\",\r\n  setQueryResults: \"SET_QUERY_RESULTS\",\r\n};\r\nexport default APIActions;\r\n","import actionTypes from \"../actions/APIActions.js\";\r\nconst initialState = {\r\n    APISwagger: null,\r\n    activeEndpoints: {},\r\n    EndpointParameters: null,\r\n    URLParameters: null,\r\n    queries: {},\r\n    queryResults: {},\r\n};\r\nconst API = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.getAPISwagger:\r\n      return { ...state, APISwagger: action.payload };\r\n    case actionTypes.setActiveEndpoint:\r\n      return {\r\n        ...state,\r\n        activeEndpoints: {\r\n          ...state.activeEndpoints,\r\n          [action.payload.apiName]: action.payload.endpoint,\r\n        },\r\n      };\r\n    case actionTypes.getEndpointParameters:\r\n      return {\r\n        ...state,\r\n        EndpointParameters: {\r\n          [action.payload.endpoint]: action.payload.parameters,\r\n        },\r\n      };\r\n    case actionTypes.setParams:\r\n      const {pathname, search} = action.payload;\r\n      //paths in apiSwagger are in this format: \"/config/launcher/{id}/\"\r\n      //and this: \"/launch\" for /launch/launch on frontend\r\n      const queryPath = pathname.replace(/\\/$/,\"\").replace(/^\\//,\"\").split(\"/\");\r\n      const api = queryPath[0] || undefined;\r\n      const endpoint = queryPath[1] || undefined;\r\n      const pathStringForSwagger = api && endpoint\r\n        ? api === endpoint\r\n        ? `/${api}/` : `/${api}/${endpoint.replace(/^(id)$/,`{id}`).replace(/(:id)$/,'/{id}')}/` : undefined;\r\n      const pathStringForReact = api && endpoint\r\n        ? `${api}/${endpoint}` : undefined;\r\n      const fullQueryForAPI = pathStringForSwagger\r\n        ? search\r\n          ? `${pathStringForSwagger.replace(`/{id}`,\"\")}${search.replace(`?id=`,\"\")}`\r\n          : `${pathStringForSwagger.replace(`/{id}`,\"\")}${search.replace(`?id=`,\"\")}`\r\n          : \"\";\r\n      const fullQueryForReact = pathStringForReact\r\n        ? search \r\n          ? `${pathStringForReact}/${search}`\r\n          : pathStringForReact\r\n          : undefined;\r\n      return { ...state, URLParameters: {\r\n        api,\r\n        endpoint,\r\n        query: search,\r\n        pathStringForSwagger,\r\n        pathStringForReact,\r\n        fullQueryForAPI,\r\n        fullQueryForReact,\r\n      } };\r\n    case actionTypes.setQuery:\r\n      return {\r\n        ...state,\r\n        queries: {\r\n          ...state.queries,\r\n          [action.payload.path]: action.payload.data,\r\n        },\r\n      };\r\n    case actionTypes.setQueryResults:\r\n      return {\r\n        ...state,\r\n        queryResults: {\r\n          ...state.queryResults,\r\n          [action.payload.query]: {\r\n            queryPath: action.payload.queryPath,\r\n            query: action.payload.query,\r\n            queryResult: action.payload.queryResult,\r\n            timestamp: Date.now(),\r\n            status: action.payload.status || \"\",\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default API;\r\n","import API from \"./API.js\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  API,\r\n});\r\n\r\nexport default rootReducer;\r\n","import \"../styles/Header.scss\";\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"left\">\r\n        <img\r\n          src={`${process.env.PUBLIC_URL}/logo70.png`}\r\n          alt=\"cute purple rocket ship\"\r\n        />\r\n        <h1>spaceage</h1>\r\n      </div>\r\n      <div className=\"right\">\r\n        <a href=\"/launch/upcoming/?search=spacex\">spacex:upcoming</a>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import APIActions from \"./APIActions\";\r\nconst allActions = { APIActions };\r\nexport default allActions;\r\n","import axios from \"axios\";\r\n\r\nconst xhr = axios.create({\r\n  baseURL: (process.env.NODE_ENV !== 'production') ? process.env.REACT_APP_DEV_API_URL : process.env.REACT_APP_API_URL\r\n});\r\n\r\nexport default xhr;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport allActions from \"../actions\";\r\nimport xhr from \"../lib/xhr.js\";\r\nexport default function APIList(props) {\r\n  const dispatch = useDispatch();\r\n  const apiSwagger = useSelector((state) => state.API.APISwagger);\r\n  const activeAPI = useSelector((state) => state.API.activeAPI);\r\n  const URLParameters = useSelector((state) => state.API.URLParameters);\r\n  const history = useHistory();\r\n\r\n  //get swagger data from server:\r\n  useEffect(() => {\r\n    xhr.get(\"/data/apis\").then((r) => {\r\n      dispatch({\r\n        type: allActions.APIActions.getAPISwagger,\r\n        payload: r.data,\r\n      });\r\n    });\r\n  }, [dispatch]);\r\n\r\n  //if the api in the URL doesn't exist, redirect to \"/\":\r\n  useEffect(() => {\r\n    if (apiSwagger && apiSwagger.paths) {\r\n      if (URLParameters.api) {\r\n        const apiMatch = Object.keys(apiSwagger.paths).filter(\r\n          (path) => path.split(\"/\")[1] === URLParameters.api\r\n        );\r\n        if (apiMatch.length === 0) {\r\n          history.push(\"/\");\r\n        }\r\n      }\r\n    }\r\n  }, [URLParameters, apiSwagger, history]);\r\n\r\n  return (\r\n    <>\r\n      {apiSwagger?.paths && (\r\n        <nav>\r\n          {Array.from(\r\n            new Set(\r\n              Object.keys(apiSwagger.paths).map((path) => {\r\n                return path.split(\"/\")[1];\r\n              })\r\n            )\r\n          ).map((apiItem, index) => {\r\n            return (\r\n              <NavLink\r\n                to={`/${apiItem}`}\r\n                key={`apiItem-${index}`}\r\n                className={`nav ${\r\n                  activeAPI && activeAPI.Name === apiItem\r\n                    ? `active`\r\n                    : `inactive`\r\n                }`}\r\n              >\r\n                {apiItem}\r\n              </NavLink>\r\n            );\r\n          })}\r\n        </nav>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport allActions from \"../actions\";\r\nexport default function EndpointList() {\r\n  const apiSwagger = useSelector((state) => state.API.APISwagger);\r\n  const activeEndpoints = useSelector((state) => state.API.activeEndpoints);\r\n  const URLParameters = useSelector((state) => state.API.URLParameters);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { api, endpoint } = URLParameters;\r\n  useEffect(() => {\r\n    if (apiSwagger && api) {\r\n      const endpointMatch = Object.keys(apiSwagger.paths).filter((path) => {\r\n        const pathArray = path.split(\"/\");\r\n        if (pathArray[1] !== api) {\r\n          return false;\r\n        }\r\n        const pathString = path\r\n          .split(\"/\")\r\n          .slice(2, -1)\r\n          .join(\":\")\r\n          .replace(\"{id}\", \"id\");\r\n        if (pathString === endpoint || endpoint === api) {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      if (\r\n        endpointMatch.length > 0 &&\r\n        (!activeEndpoints || !activeEndpoints.hasOwnProperty(api))\r\n      ) {\r\n        dispatch({\r\n          type: allActions.APIActions.setActiveEndpoint,\r\n          payload: { apiName: api, endpoint },\r\n        });\r\n      }\r\n      if (\r\n        endpointMatch.length > 0 &&\r\n        activeEndpoints &&\r\n        activeEndpoints.hasOwnProperty(api) &&\r\n        activeEndpoints[api] !== endpoint\r\n      ) {\r\n        dispatch({\r\n          type: allActions.APIActions.setActiveEndpoint,\r\n          payload: { apiName: api, endpoint: endpoint },\r\n        });\r\n      }\r\n      if (\r\n        activeEndpoints && !endpoint && activeEndpoints.hasOwnProperty(api)\r\n      ) {\r\n        history.push(\r\n          `/${api}/${activeEndpoints[api]}`\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    URLParameters,\r\n    dispatch,\r\n    apiSwagger,\r\n    api,\r\n    endpoint,\r\n    activeEndpoints,\r\n    history,\r\n  ]);\r\n  return (\r\n    <nav>\r\n      {api && apiSwagger &&\r\n        Object.keys(apiSwagger.paths).map((path, index) => {\r\n          const pathParts = path.split(\"/\");\r\n          const endpointPath =\r\n            pathParts[2] === \"\"\r\n              ? api\r\n              : pathParts.slice(2, -1).join(\":\").replace(/[{}]/g, \"\");\r\n          if (pathParts[1] === api) {\r\n            return (\r\n              <NavLink\r\n                to={`/${api}/${endpointPath}`}\r\n                key={`endpoint-${endpointPath}-${index}`}\r\n                className={`nav ${\r\n                  URLParameters.endpoint === endpointPath\r\n                    ? `active`\r\n                    : `inactive`\r\n                }`}\r\n              >\r\n                {endpointPath}\r\n              </NavLink>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n    </nav>\r\n  );\r\n}\r\n","import allActions from \"../actions\";\r\nimport xhr from \"./xhr\";\r\nimport { store } from \"../index.js\";\r\nconst callAPI = ({ pathStringForReact, fullQueryForReact, fullQueryForAPI }) => {\r\n  store.dispatch({\r\n    type: allActions.APIActions.setQueryResults,\r\n    payload: {\r\n      queryPath: pathStringForReact,\r\n      query: fullQueryForReact,\r\n      queryResult: [],\r\n      status: \"searching\",\r\n    },\r\n  });\r\n  xhr\r\n    .get(`/data${fullQueryForAPI}`)\r\n    .then((r) => {\r\n      if (r.data) {\r\n        store.dispatch({\r\n          type: allActions.APIActions.setQueryResults,\r\n          payload: {\r\n            queryPath: pathStringForReact,\r\n            query: fullQueryForReact,\r\n            queryResult: r.data,\r\n            status: \"success\",\r\n          },\r\n        });\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      store.dispatch({\r\n        type: allActions.APIActions.setQueryResults,\r\n        payload: {\r\n          queryPath: pathStringForReact,\r\n          query: fullQueryForReact,\r\n          queryResult: [],\r\n          status: \"unable to retrieve data from the server, try again later\",\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport default callAPI;\r\n","const getAndSortParameters = (pathData) => {\r\n    const favoriteParameters = [\"search\"];\r\n    const parameters = [];\r\n    \r\n    if (pathData?.get?.parameters && pathData.get.parameters.length > 0) {\r\n        parameters.push(...pathData.get.parameters);\r\n      }\r\n      if (pathData?.parameters && pathData.parameters.length > 0) {\r\n        parameters.push(...pathData.parameters);\r\n      }\r\n      const favoritesInParameters = parameters.filter((parameter) =>\r\n        favoriteParameters.includes(parameter.name)\r\n      );\r\n      const parametersMinusFavorites = parameters.filter((parameter) => {\r\n        let match = 0;\r\n        favoritesInParameters.forEach((fav) => {\r\n          if (fav.name === parameter.name) {\r\n            match++;\r\n          }\r\n        });\r\n        if (match > 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return ([\r\n        ...favoritesInParameters,\r\n        ...parametersMinusFavorites,\r\n      ]);\r\n}\r\nexport default getAndSortParameters;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {  useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport allActions from \"../actions\";\r\nimport callAPI from \"../lib/callAPI\";\r\nimport getAndSortParameters from \"../lib/getAndSortParameters\";\r\nexport default function QueryParameters() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const apiSwagger = useSelector((state) => state.API.APISwagger);\r\n  const EndpointParameters = useSelector(\r\n    (state) => state.API.EndpointParameters\r\n  );\r\n  const URLParameters = useSelector((state) => state.API.URLParameters);\r\n  const queries = useSelector((state) => state.API.queries);\r\n  const queryResults = useSelector((state)=> state.API.queryResults);\r\n  const {api, endpoint, query, pathStringForSwagger, fullQueryForAPI, pathStringForReact, fullQueryForReact} = URLParameters;\r\n\r\n  // if query parameters are in URLParameters.query, execute the search immediately\r\n  useEffect(()=>{\r\n    if (query && apiSwagger.paths[`${pathStringForSwagger}`]) {\r\n      const queryObject = JSON.parse(\r\n        '{\"' + decodeURI(query)\r\n          .replace(/^\\?/,'')\r\n          .replace(/\"/g, '\\\\\"')\r\n          .replace(/&/g, '\",\"')\r\n          .replace(/=/g,'\":\"') + '\"}'\r\n      );\r\n      dispatch({\r\n        type: allActions.APIActions.setQuery,\r\n        payload: { path: fullQueryForReact, data: queryObject }\r\n      });\r\n      if (\r\n        !queryResults[fullQueryForReact]\r\n        || queryResults[fullQueryForReact].timestamp < Date.now() - 10000\r\n        ) {\r\n        callAPI(URLParameters);\r\n      }\r\n    }\r\n  },[query, queryResults, apiSwagger, URLParameters, fullQueryForReact, pathStringForSwagger, dispatch]);\r\n  useEffect(() => {\r\n    //generate list of parameters for the endpoint\r\n    if (endpoint && api && apiSwagger) {\r\n      const pathData = apiSwagger.paths[`${pathStringForSwagger}`];\r\n      const sortedParameters = getAndSortParameters(pathData);\r\n      dispatch({\r\n        type: allActions.APIActions.getEndpointParameters,\r\n        payload: {\r\n          endpoint: pathStringForReact,\r\n          parameters: sortedParameters,\r\n        },\r\n      });\r\n      // if the endpoint has no parameters, execute the search immediately\r\n      if (sortedParameters.length === 0 && pathData?.get) {\r\n        if (\r\n          !queryResults[fullQueryForReact]\r\n          || queryResults[fullQueryForReact].timestamp < Date.now() - 10000\r\n          ) {\r\n          callAPI(URLParameters);\r\n        }\r\n      }\r\n    }\r\n  }, [URLParameters, pathStringForSwagger, pathStringForReact, fullQueryForReact, api, endpoint, apiSwagger, queryResults, dispatch]);\r\n  //if query data has not been stored for current path, create empty object for this path:\r\n  useEffect(() => {\r\n    if (fullQueryForReact && fullQueryForReact !== \"\" && !fullQueryForReact.includes(\"undefined\")) {\r\n      const pathExists = queries ? fullQueryForReact in queries : false;\r\n      if (!pathExists) {\r\n        dispatch({\r\n          type: allActions.APIActions.setQuery,\r\n          payload: { path: fullQueryForReact, data: null },\r\n        });\r\n      }\r\n    }\r\n  }, [queries, fullQueryForReact, dispatch]);\r\n\r\n  //if query data has been stored for current path, push to address bar:\r\n  useEffect(()=>{\r\n    if (queries && queries[fullQueryForReact]) {\r\n      const queryParameters = Object.entries(queries[fullQueryForReact])\r\n        .filter((entry) => entry[1] !== \"\")\r\n        .map((entry) => `${entry[0]}=${entry[1]}`)\r\n        .sort()\r\n        .join(\"&\");\r\n      const currentLocation = `${history.location.pathname}${history.location.search}`;\r\n      const newLocation = `/${pathStringForReact}/?${queryParameters}`;\r\n      if (currentLocation !== newLocation) {\r\n        console.log('pushing');\r\n        history.push(`/${pathStringForReact}/?${queryParameters}`);\r\n      }\r\n    }\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  //if query data is null, add the first APIParameter to state to use by default:\r\n  useEffect(() => {\r\n    if (\r\n      queries &&\r\n      queries[fullQueryForReact] === null &&\r\n      EndpointParameters &&\r\n      EndpointParameters[pathStringForReact] &&\r\n      EndpointParameters[pathStringForReact].length > 0\r\n    ) {\r\n      dispatch({\r\n        type: allActions.APIActions.setQuery,\r\n        payload: {\r\n          path: fullQueryForReact,\r\n          data: { [EndpointParameters[pathStringForReact][0].name]: \"\" },\r\n        },\r\n      });\r\n    }\r\n  }, [queries, pathStringForReact, EndpointParameters, fullQueryForAPI, fullQueryForReact, dispatch]);\r\n  const addField = () => {\r\n    const firstUnusedField = EndpointParameters[pathStringForReact].filter(\r\n      (parameter) => !Object.keys(queries[fullQueryForReact]).includes(parameter.name)\r\n    )[0].name;\r\n    dispatch({\r\n      type: allActions.APIActions.setQuery,\r\n      payload: {\r\n        path: fullQueryForReact,\r\n        data: {\r\n          ...queries[fullQueryForReact],\r\n          [firstUnusedField]: \"\",\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const removeField = (e) => {\r\n    const fieldName = e.target.id.substring(0, e.target.id.length - 7);\r\n    const newQueryData = queries[fullQueryForReact];\r\n    delete newQueryData[fieldName];\r\n    dispatch({\r\n      type: allActions.APIActions.setQuery,\r\n      payload: { path: fullQueryForReact, data: newQueryData },\r\n    });\r\n  };\r\n  const changeFieldName = (e) => {\r\n    const oldFieldName = e.target.id.substring(0, e.target.id.length - 7);\r\n    const newFieldName = e.target.value;\r\n    const newQueryData = queries[fullQueryForReact];\r\n    delete newQueryData[oldFieldName];\r\n    newQueryData[newFieldName] = \"\";\r\n    dispatch({\r\n      type: allActions.APIActions.setQuery,\r\n      payload: { path: fullQueryForReact, data: newQueryData },\r\n    });\r\n  };\r\n  const changeValue = (e) => {\r\n    const newQueryData = queries[fullQueryForReact];\r\n    newQueryData[e.target.id.substring(0, e.target.id.length - 6)] =\r\n      e.target.value;\r\n    dispatch({\r\n      type: allActions.APIActions.setQuery,\r\n      payload: { path: fullQueryForReact, data: newQueryData },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    const queryParameters = Object.entries(queries[fullQueryForReact])\r\n      .filter((entry) => entry[1] !== \"\")\r\n      .map((entry) => `${entry[0]}=${entry[1]}`)\r\n      .sort()\r\n      .join(\"&\");\r\n    history.push(`/${pathStringForReact}/?${queryParameters}`);\r\n  };\r\n  return (\r\n    <>\r\n      {queries &&\r\n        queries[fullQueryForReact] &&\r\n        EndpointParameters &&\r\n        EndpointParameters[pathStringForReact] && (\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              onSubmit();\r\n            }}\r\n          >\r\n            {Object.entries(queries[fullQueryForReact]).map((entries, index) => {\r\n              const [parameter, value] = entries;\r\n              return (\r\n                <div key={`queryItem-${index}`}>\r\n                  <select\r\n                    value={parameter}\r\n                    id={`${parameter}-select`}\r\n                    onChange={(e) => changeFieldName(e)}\r\n                  >\r\n                    {EndpointParameters[pathStringForReact] &&\r\n                      EndpointParameters[pathStringForReact].length > 0 &&\r\n                      EndpointParameters[pathStringForReact].map((param, index) => {\r\n                        const disabled =\r\n                          Object.keys(queries[fullQueryForReact]).includes(\r\n                            param.name\r\n                          ) && parameter !== param.name;\r\n                        return (\r\n                          <option\r\n                            key={`param-${index}`}\r\n                            disabled={disabled}\r\n                            id={`${param.name}-option`}\r\n                          >\r\n                            {param.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </select>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={(e) => changeValue(e)}\r\n                    id={`${parameter}-input`}\r\n                  ></input>\r\n                  {index > 0 && (\r\n                    <button\r\n                      type=\"button\"\r\n                      id={`${parameter}-remove`}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        removeField(e);\r\n                      }}\r\n                    >\r\n                      -\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n            {Object.keys(queries[fullQueryForReact]).length <\r\n              EndpointParameters[pathStringForReact].length && (\r\n              <p>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    addField();\r\n                  }}\r\n                >\r\n                  +\r\n                </button>\r\n              </p>\r\n            )}\r\n            <p>\r\n              <input type=\"submit\" value=\"search\" />\r\n            </p>\r\n          </form>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n","import validator from 'validator';\r\nexport default function ResultItem(props) {\r\n  const {property, value} = props;\r\n  if (value === null || value.length === 0) { return null }\r\n  if (typeof value === \"object\") {\r\n    return (\r\n      <div className=\"resultItem\">\r\n        <details>\r\n          <summary>\r\n            <p>\r\n              <span className=\"label\">\r\n                {property}\r\n                {value.name && ` (${value.name})`}\r\n                {!value.name && value.title && ` (${value.title})`}\r\n              </span>\r\n            </p>\r\n          </summary>\r\n          {Object.entries(value).map((subProp,idx)=>{\r\n            const [subProperty,subValue]=subProp;\r\n            if (subValue === null) { return null }\r\n            return(\r\n              <ResultItem key={`${property}-${subProperty}-${idx}`} property={subProperty} value={subValue} />\r\n            )\r\n        })}\r\n        </details>\r\n      </div>\r\n    )\r\n  } else {\r\n    const stringifiedValue = JSON.stringify(value).replace(/^\"(.+)\"$/,'$1');\r\n   return (\r\n    <div className=\"resultItem\">\r\n      <p><span className=\"label\">{property}</span>: {validator.isURL(stringifiedValue) ? <a href={stringifiedValue}>{stringifiedValue}</a> : stringifiedValue}</p>\r\n    </div>\r\n   )\r\n  } \r\n}","import ResultItem from \"./ResultItem\";\r\nimport validator from \"validator\";\r\nimport \"../styles/QueryResults.scss\";\r\nexport default function ResultCard(props) {\r\n  const imageData = {\r\n    url: null,\r\n  };\r\n  return (\r\n    <div className=\"resultCard\">\r\n      <div className=\"left\">\r\n        {Object.entries(props.data).map((result, idx) => {\r\n          const [property, value] = result;\r\n          if (property === \"image\" && value?.length > 0) {\r\n            imageData.url = value;\r\n            return null;\r\n          }\r\n          if (value === null || value.length === 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <ResultItem\r\n              key={`${property}-${idx}`}\r\n              property={property}\r\n              value={value}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {imageData.url !== null && validator.isURL(imageData.url) && (\r\n        <div className=\"right\">\r\n          <a href={imageData.url} target=\"new\">\r\n            <img src={imageData.url} alt={\"\"} />\r\n          </a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"../styles/Loading.scss\";\r\nconst Loading = () => {\r\n  return (\r\n  <div className=\"loadingContainer\">\r\n    <p className=\"loadingText\">...searching...</p>\r\n    <img className=\"loadingImage\" alt=\"rocket flying around\" src={`${process.env.PUBLIC_URL}/logo150.png`} />\r\n  </div>\r\n  )\r\n}\r\nexport default Loading;\r\n","import { useSelector } from \"react-redux\";\r\nimport ResultCard from \"./ResultCard\";\r\nimport Loading from \"./Loading\";\r\nimport \"../styles/QueryResults.scss\";\r\nexport default function QueryResults() {\r\n  const URLParameters = useSelector((state) => \r\n    state.API.URLParameters\r\n  );\r\n  const {fullQueryForReact} = URLParameters\r\n  const queryResults = useSelector((state) =>  state.API.queryResults);\r\n  return (\r\n    <>\r\n    {queryResults && queryResults[fullQueryForReact] && queryResults[fullQueryForReact].queryResult?.results &&\r\n      <div className=\"queryResults\">\r\n        {queryResults[fullQueryForReact].queryResult.results.map((result,index)=>{\r\n          return(\r\n            <ResultCard key={`resultCard-${index}`} data={result} />\r\n          )\r\n        })}\r\n      </div>\r\n    }\r\n    {(!queryResults || !queryResults[fullQueryForReact]) &&\r\n      <p>no data</p>\r\n    }\r\n    {queryResults && queryResults[fullQueryForReact] && queryResults[fullQueryForReact].status === \"searching\" && <Loading />}\r\n    </>\r\n  );\r\n}","import \"../styles/App.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport APIList from \"./APIList.js\";\r\nimport EndpointList from \"./EndpointList.js\";\r\nimport QueryParameters from \"./QueryParameters.js\";\r\nimport allActions from \"../actions\";\r\nimport QueryResults from \"./QueryResults\";\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const URLParameters = useSelector((state)=>state.API.URLParameters);\r\n  useEffect(() => {\r\n    dispatch({ type: allActions.APIActions.setParams, payload: location });\r\n  }, [location, dispatch]);\r\n  return (\r\n    <>\r\n      <Header />\r\n      <APIList />\r\n      {URLParameters?.api && \r\n        <>\r\n          <EndpointList />\r\n          {URLParameters?.endpoint &&\r\n            <>\r\n              <QueryParameters />\r\n              <QueryResults />\r\n            </>\r\n          }\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { compose, createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport persistState from \"redux-localstorage\";\r\n\r\nconst enhancer = compose(persistState());\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  enhancer\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nexport { store };\r\n"],"sourceRoot":""}